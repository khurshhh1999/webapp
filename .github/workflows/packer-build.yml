name: Build and Deploy AMI
run-name: "Build and Deploy AMI from commit ${{ github.sha }}"

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-ami:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Application
        run: |
          mvn clean package
          cp target/*.jar app.jar
          ls -l app.jar  # Verify jar exists

      - name: Configure AWS Credentials (Dev Account)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: '1.8.7'

      - name: Verify Required Files
        run: |
          ls -la
          test -f packer-webapp.pkr.hcl || (echo "Packer file not found" && exit 1)
          test -f app.jar || (echo "Application jar not found" && exit 1)
          test -f myapp.service || (echo "Service file not found" && exit 1)
          test -f cloudwatch-config.json || (echo "CloudWatch config not found" && exit 1)

      - name: Build AMI
        env:
          DEV_ACCOUNT_ID: ${{ secrets.DEV_ACCOUNT_ID }}
          DEMO_ACCOUNT_ID: ${{ secrets.DEMO_ACCOUNT_ID }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        run: |
          echo "Running packer init..."
          packer init .

          echo "Running packer validate..."
          packer validate \
            -var "dev_account_id=${DEV_ACCOUNT_ID}" \
            -var "demo_account_id=${DEMO_ACCOUNT_ID}" \
            -var "db_user=${DB_USER}" \
            -var "db_password=${DB_PASSWORD}" \
            -var "sendgrid_api_key=${SENDGRID_API_KEY}" \
            -var "email_from=${EMAIL_FROM}" \
            packer-webapp.pkr.hcl

          echo "Running packer build..."
          packer build \
            -var "instance_type=t3.medium" \
            -var "dev_account_id=${DEV_ACCOUNT_ID}" \
            -var "demo_account_id=${DEMO_ACCOUNT_ID}" \
            -var "db_user=${DB_USER}" \
            -var "db_password=${DB_PASSWORD}" \
            -var "sendgrid_api_key=${SENDGRID_API_KEY}" \
            -var "email_from=${EMAIL_FROM}" \
            packer-webapp.pkr.hcl

          AMI_ID=$(aws ec2 describe-images --owners self --filters "Name=name,Values=webapp-ami-*" --query 'sort_by(Images, &CreationDate)[-1].ImageId' --output text)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Share AMI with Demo Account
        run: |
          aws ec2 modify-image-attribute \
            --image-id ${{ env.AMI_ID }} \
            --launch-permission "Add=[{UserId=${{ secrets.DEMO_ACCOUNT_ID }}]"

      - name: Configure AWS Credentials (Demo Account)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Launch Template
        run: |
          VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name webapp-launch-template \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' --output text)
          echo "New Launch Template Version: $VERSION"

          # Set the launch template default version to the new version
          aws ec2 modify-launch-template \
            --launch-template-name webapp-launch-template \
            --default-version $VERSION

      - name: Start Instance Refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name webapp-asg \
            --preferences '{"MinHealthyPercentage": 90}' \
            --query 'InstanceRefreshId' --output text)
          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

      - name: Wait for Refresh
        run: |
          TIMEOUT=1800  # 30 minutes
          ELAPSED=0
          INTERVAL=30
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name webapp-asg \
              --instance-refresh-ids ${{ env.REFRESH_ID }} \
              --query 'InstanceRefreshes[0].Status' --output text)
            echo "Current status: $STATUS"
            if [ "$STATUS" = "Successful" ]; then exit 0; fi
            if [ "$STATUS" = "Failed" ]; then exit 1; fi
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "Instance refresh timed out."
              exit 1
            fi
          done

      - name: Cleanup
        if: always()
        run: |
          rm -f app.jar